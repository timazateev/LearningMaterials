using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LearningMaterials.Basics.BoxingUnboxing
{
    /// <summary>
    /// Упаковка (boxing) позволяет преобразовать размерный тип в ссылочный. При упаковке объекта размерного типа происходят следующие действия:
    /// Выделяется память в управляемой куче.
    /// Совершается копирование полей размерного типа в память, которая была выделена в куче.
    /// Возвращается адрес объекта.
    /// Некоторые компиляторы автоматически создают IL-код, необходимый для упаковки объекта размерного типа.Процесс извлечения адреса полей из упакованного объекта называется распаковкой (unboxing). Распаковка не является полной противоположностью упаковке. В отличие от упаковки при распаковке не происходит никакого копирования. Однако обычно вслед за распаковкой следует копирование полей, поэтому обе операции (распаковка и копирование) являются противоположностью операции упаковки.Приведем пример использования упаковки и распаковки.
    /// Упаковка и распаковка/копирование снижают производительность приложения как в плане замедления, так и в расходе дополнительной памяти, поэтому нужно стараться минимизировать создание кода, в котором происходят операции упаковки и распаковки/копирования.
    /// </summary>
    public class BoxingUnboxingExample
    {
        struct Point
        {
            public Int32 x, у;
        }

        class App
        {
            static void BoxingUnboxingExample()
            {
                ArrayList a = new ArrayList();
                Point p;            // Выделяется память для Point (не в куче).
                for (Int32 i = 0; i < 10; i++)
                {
                    p.x = p.у = i;  // Инициализация членов в нашем размерном типе.
                    a.Add(p);       // Упаковка размерного типа и добавление ссылки в ArrayList.
                }

                Point р1 = (Point)a[0];     // распаковка и копирование полей
            }
        }
    }
}
