using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace LearningMaterials.Patterns.OOP
{
    /// <summary>
    /// Объектно-ориентированное программирование основывается на понятиях абстракции, инкапсуляции, полиморфизма и наследования.Классы реализуют эти концепции для построение объектов, контролирующих или реализующих систему.
    /// Абстракция позволяет уменьшить связывание между компонентами пердоставляя дополнительный слой между ними, для того чтоб один объект не зависил от того, как другой реализуюет свои бизнес-правила. (Интерфейсы, слои) Отличная штука, если вы хотите изолировать части системы так, чтоб их изменение или замена не стали проблеммой для работы системы в целом.
    /// Инкапсуляция позволяет работать абстракции пряча детали реализации класса от вызывающих его. (Публичные и приватные поля)
    /// Наследование позволяет базовым(родительским) классам содержать общую функциональность и передавать ее всем своим классам-потомкам.Класс Figure(фигура) может иметь поле цвет, которое будет унаследовано его классами-потомками Square(квадрат) или Circle(круг).
    /// Полиморфизм позволяет реализовывать одноименные публичные методы, позволяя различным классам выполнять различные действия при одном и том же вызове.То есть объекты классов Square и Circle могут отображаться(реализовывать метод render) поразному несмотря не то, что они оба подклассы Shape, метод render определен в Shape. (Overriding)
    /// </summary>
    public class OOP
    {
    }
}
